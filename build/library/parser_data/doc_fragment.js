export default ((s, u, g) => ({
    fn: {},
    /************** Maps **************/
    st: s,
    /* Types */ ty: { 1: 1, 2: 1, 3: 2, 4: 2, 8: 3, 16: 3, 32: 4, 64: 4, 128: 5, 256: 5, 264: 6, 512: 6, 1025: 7, 2049: 7, 4097: 8, 8193: 8, 16385: 9, 32769: 9, number: 10, num: 10, identifier: 11, string: 11, white_space: 12, open_bracket: 12, close_bracket: 13, operator: 13, symbol: 14, new_line: 14, data_link: 15, number_bin: 15, number_oct: 16, number_hex: 16, number_int: 17, number_sci: 17, number_flt: 18, alpha_numeric: 18, white_space_new_line: 30, id: 19, str: 20, ws: 20, ob: 21, cb: 21, op: 22, sym: 22, nl: 23, dl: 23, int: 24, integer: 24, bin: 25, binary: 25, oct: 26, octal: 26, hex: 27, hexadecimal: 27, flt: 28, float: 28, sci: 29, scientific: 29, any: 31, keyword: 32 },
    /* Symbols To Inject into the Lexer */ sym: ["<!", "--", "```"],
    /* Symbol Lookup map */ lu: new Map([["num", 1], ["id", 1], ["alpha_numeric", 2], ["str", 2], ["ws", 3], ["ob", 3], ["cb", 4], ["op", 4], ["sym", 5], ["nl", 5], ["white_space_new_line", 6], ["dl", 6], ["binary", 7], ["octal", 7], ["hexadecimal", 8], ["integer", 8], ["scientific", 9], ["float", 9], [1, 10], [2, 19], [4, 20], [8, 20], [16, 21], [32, 21], [64, 22], [128, 22], [256, 23], [512, 23], [1025, 25], [2049, 26], [4097, 27], [8193, 24], [16385, 29], [32769, 28], [3, 18], [264, 30], [200, 31], [201, 32], ["<!", 34], ["--", 35], [null, 31], ["\\", 41], ["/", 42], ["*", 43], ["[", 44], ["]", 45], [":", 46], [">", 47], ["```", 48], [";", 49], ["README", 50], ["API", 51], ["MAIN_PAGE", 52]]),
    /* States */ sts: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 10, 13, 14, 15, 16, 17, 10, 18, 19, 20, 21, 16, 22, 23, 24, 25, 26, 27, 27, 27, 28, 27, 27, 29, 30, 31, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 40, 41, 39, 42, 43, 44, 39, 45, 46].map(i => s[i]),
    /* Fork Map */ fm: [],
    /*Goto Lookup Functions*/ gt: g[0].map(i => i >= 0 ? u[i] : []),
    /************ Functions *************/
    /* Environment Functions*/ fns: [_ => (([..._[0], _[1]])), _ => ([_[0]]), (_, $, A, B) => ({ type: "fragment", preamble: _[1], content: _[3], pos: B }), (_, $, A, B) => ({ type: "fragment", preamble: _[1], pos: B }), _ => (_[0].join("\n")), _ => (_[0]), _ => (_[0].slice()), (_, $, A, B) => (B), _ => (_[1]), _ => ({ activated: true, usage: _[0], specifier: _[1] }), _ => ({ activated: true, specifier: _[0] }), _ => ({ activated: true, usage: _[0], specifier: null }), () => ({ activated: true, specifier: null }), _ => (([..._[0], _[2]]))],
    /* State Action Functions */ sa: [e => 26, (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 9), (a, b, c, e, f, g, p) => (p.rv(g[0], 2, 0, a, b, c, e, f), 4115), e => 34, (a, b, c, e, f, g, p) => (p.rn(2, a, b, c, e, f), 8211), e => 90, e => 146, e => 98, e => 162, e => 114, e => 82, (a, b, c, e, f, g, p) => (p.rv(g[1], 1, 0, a, b, c, e, f), 4107), (a, b, c, e, f, g, p) => (p.rv(g[11], 1, 0, a, b, c, e, f), 30731), (a, b, c, e, f, g, p) => (p.rv(g[10], 1, 0, a, b, c, e, f), 30731), e => 130, (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 47115), e => 122, (a, b, c, e, f, g, p) => (p.rv(g[9], 2, 0, a, b, c, e, f), 30739), (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 40971), e => 170, (a, b, c, e, f, g, p) => (p.rn(2, a, b, c, e, f), 28691), (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 26635), (a, b, c, e, f, g, p) => (p.rn(2, a, b, c, e, f), 32787), (a, b, c, e, f, g, p) => (p.rv(g[1], 1, 0, a, b, c, e, f), 45067), e => 194, e => 202, (a, b, c, e, f, g, p) => (p.rv(g[8], 3, 0, a, b, c, e, f), 26651), (a, b, c, e, f, g, p) => (p.rv(g[13], 3, 0, a, b, c, e, f), 45083), (a, b, c, e, f, g, p) => (p.rv(g[3], 3, 0, a, b, c, e, f), 6171), e => 290, e => 282, e => 250, e => 266, e => 298, e => 362, e => 314, e => 322, e => 330, (a, b, c, e, f, g, p) => (p.rv(g[2], 4, 0, a, b, c, e, f), 6179), (a, b, c, e, f, g, p) => (p.rv(g[1], 1, 0, a, b, c, e, f), 12299), (a, b, c, e, f, g, p) => (p.rv(g[1], 1, 0, a, b, c, e, f), 22539), (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 18443), (a, b, c, e, f, g, p) => (p.rv(g[5], 1, 0, a, b, c, e, f), 16395), e => 338, e => 354, (a, b, c, e, f, g, p) => (p.rv(g[6], 1, 0, a, b, c, e, f), 18443), (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 49163), (a, b, c, e, f, g, p) => (p.rv(g[5], 2, 0, a, b, c, e, f), 16403), (a, b, c, e, f, g, p) => (p.rv(g[7], 1, 0, a, b, c, e, f), 24587), e => 378, e => 402, e => 458, e => 426, e => 394, e => 442, (a, b, c, e, f, g, p) => (p.rv(g[0], 2, 0, a, b, c, e, f), 22547), (a, b, c, e, f, g, p) => (p.rn(3, a, b, c, e, f), 18459), (a, b, c, e, f, g, p) => (p.rv(g[1], 1, 0, a, b, c, e, f), 36875), (a, b, c, e, f, g, p) => (p.rn(1, a, b, c, e, f), 34827), e => 418, (a, b, c, e, f, g, p) => (p.rv(g[7], 3, 0, a, b, c, e, f), 38939), (a, b, c, e, f, g, p) => (p.rv(g[0], 2, 0, a, b, c, e, f), 36883), e => 466, (a, b, c, e, f, g, p) => (p.rv(g[4], 1, 0, a, b, c, e, f), 14347), (a, b, c, e, f, g, p) => (p.rn(2, a, b, c, e, f), 34835), (a, b, c, e, f, g, p) => (p.rv(g[0], 2, 0, a, b, c, e, f), 12307)],
    /* Get Token Function  */ gtk: function getToken(l, SYM_LU, IGNORE_KEYWORDS = false) { if (l.END)
        return 0; if ((l.ty & 1)) {
        if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))
            return SYM_LU.get(l.tx);
        switch (l.ty) {
            case 16385: return 29;
            case 4097: return 27;
            case 2049: return 26;
            case 1025: return 25;
            case 32769: return 28;
            case 8193: return 24;
            default:
            case 1: return 10;
        }
    } switch (l.ty) {
        case 2:
            if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))
                return 32;
            return 19;
        case 4: return 20;
        case 256: return 23;
        case 8: return 20;
        case 512: return 23;
        default: return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    } },
}))(...("-l;0;-3;0;-b;2&4;-k;0;-3;0;-b;2&6;-k;0;-3;0;-b;6&-l;0;-3;0;-c;8&-k;a;0;-3;0;-c;a;-9;a;-2;a;-4;1ekr&-k;c;0;-3;0;-l;e;-2;g;-4;i;k;m&o;-k;0;-3;0;-b;o&-l;0;-3;0;-c;q;-b;g&-l;0;-3;0;-c;s&-l;0;-3;0;-c;u&-l;0;-3;0;-c;w;-a;pb5;-3;w&-k;y;0;-3;0&-l;0;-3;0;-c;10&-l;0;-3;0;-c;12&-l;0;-3;0;-o;14&-l;0;-3;0;-c;16&-k;c;0;-3;0;-r;i;k;m&-l;0;-3;0;-c;18;-b;18&1a;-a;1a;-9;1a;0;-2;1a;0;-8;1a;-3;1a;-7;1a;-7;1a;-2;1elr&-l;0;-3;0;-m;1c;-4;1c&-l;0;-3;0;-m;1e;-4;1g&-l;0;-3;0;-c;1i;-b;1i&-l;0;-3;0;-m;1k;-4;1k&1m;-a;1o;-9;1q;0;-2;1s;0;-8;1u;-3;1m;-7;1w;-7;1y;-2;20;22;24&26;-k;0;-3;0;-b;26&28;-a;28;-9;28;0;-2;28;0;-8;28;-3;28;-7;28;-7;28;-2;1emp&2a;-a;2a;-9;2a;0;-2;pcj;-8;2a;-3;2a;-7;2a;-7;2a;-2;1emr&2c;-a;2c;-9;2c;0;-2;pcl;-8;2c;-3;2c;-7;2c;-7;2c;-2;1emt&2e;-a;2e;-9;2e;0;-2;2e;2g;-8;2e;-3;2e;-7;2e;-7;2e;-2;1emv&2c;-a;2c;-9;2c;0;-2;pcl;-8;2c;-3;2c;-7;2c;2i;-6;2c;-2;1emt&2k;-a;2k;-9;2k;0;-2;pct;-8;2k;-3;2k;-7;2k;-7;2k;-2;1en1&2m;-a;2m;-9;2m;0;-2;pcv;-8;2m;-3;2m;-7;2m;-7;2m;-2;1en3&2o;-a;2o;-9;2o;0;-2;2o;0;-8;2o;-3;2o;-7;2o;-7;2o;-2;1en5&2q;-a;1o;-9;1q;0;-2;1s;2q;-8;1u;-3;2q;-7;1w;-7;1y;-2;20;22;24&-l;0;-3;0;-k;2s&-b;2u;-9;2w;0;-2;2y;0;-8;30;-a;32&34;-a;34;-9;34;0;-2;pdd;-8;34;-3;34;-7;34;-7;34;-2;1enl&36;-a;36;-9;36;0;-2;pdf;-8;36;-3;36;-7;36;-7;36;-2;1enn&-b;38;-9;38;0;-2;38;0;-8;38;-a;38;-7;38&-b;3a;-9;3a;0;-2;3a;0;-8;3a;-a;3a;-7;3a&-b;2u;-9;2w;0;-2;2y;0;-8;30;-a;32;-7;3c&3e;-a;3e;-9;3e;0;-2;pdn;-8;3e;-3;3e;-7;3e;-7;3e;-2;1env&-b;3g;-9;3g;0;-2;3g;0;-8;3g;-a;3g;-7;3g&-l;0;-3;0;-p;3i&3k;-a;1o;-9;1q;0;-2;1s;0;-8;1u;-3;3k;-7;1w;-7;1y;-2;20;22;24&-b;3m;-9;pdv;-2;pdv;-8;3m;-a;3m;-7;3m&3o;-a;3o;-9;3o;0;-2;3o;0;-8;3o;-3;3o;-7;3o;-7;3o;-2;1eo5|-3;2;c;a&-4;4;a&-e;e;g;i;-8;12&-f;q&-h;1i&-l;y&-n;1a;18&-o;1g&-7;34;1k;1m;1o;-2;2e;1w;-7;24;-5;1s&-a;2k;-a;24;-5;1s&-i;2o;2u&-i;30&-9;3a;1o;-2;2e;1w;-7;24;-5;1s|0;2;-4;4;-2;6;-2;8;-3;a;-6;c;-7;e;-2;g;-g;i;-2;k;-6;m;-5;o;-4").split("|").map(e => e.split("&")).map(a => a.map(s => s.split(";").map(s => parseInt(s, 36))).map(s => s.flatMap(d => d < 0 ? (new Array(-d - 1)).fill(-1) : (new Array(((d >>> 15) & 0x3FF) + 1)).fill((d >>> 1) & 0x3FFF)))));
//# sourceMappingURL=doc_fragment.js.map