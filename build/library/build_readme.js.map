{"version":3,"file":"build_readme.js","sourceRoot":"","sources":["../../source/typescript/build_readme.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Targets a single CandleFW library and generates a readme.md page from the readme templates, source code, and comments.\n */\n\nimport debug_data from \"@candlefw/ts/source/grammar/typescript.debug_info.js\";\nimport { TSNodeTypeLU, TSNode, parser, renderWithFormatting } from \"@candlefw/ts\";\nimport { traverse } from \"@candlefw/conflagrate\";\nimport { lrParse } from \"@candlefw/hydrocarbon\";\nimport URL from \"@candlefw/url\";\nimport { Lexer } from \"@candlefw/wind\";\n\nimport txt_to_svg from \"text-to-svg\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport comment_parser_data from \"./parser_data/comment.js\";\nimport fragment_parser_data from \"./parser_data/doc_fragment.js\";\n\nconst fsp = fs.promises,\n    library = process.cwd(),\n    fn_regex = /(file\\:\\/\\/)(\\/)*([A-Z]\\:)*/g,\n    doc_dir = path.join(\"/\", import.meta.url.replace(fn_regex, \"\"), \"../../..\"),\n    cfw_font = txt_to_svg.loadSync(path.join(doc_dir, './source/font/cfw.otf'));\n\n\nfunction mergeComments(ast: TSNode, comments: Lexer[]) {\n\n    for (const comment of comments) {\n        let closest_node = null;\n\n        if (!closest_node || closest_node.pos.off < comment.off) {\n\n            for (const { node } of traverse(ast, \"nodes\")) {\n                if (node.pos) {\n                    if (node.pos.off < comment.off) continue;\n\n                    //Get the first node who\n                    closest_node = node;\n                    break;\n                }\n            }\n        }\n\n        if (closest_node) {\n            if (!closest_node.comments)\n                closest_node.comments = [comment];\n            else\n                closest_node.comments.push(comment);\n\n            console.log(TSNodeTypeLU[closest_node.type], comment.slice());\n        }\n    }\n}\n\nfunction renderDocumentSection(name: any): any {\n    return `[Docs](https://cfw.acweathersby.com/${name})`;\n}\n\nfunction renderPollyFillBrief(ast: never): any {\n    return `### TODO - FILL THIS IN! \\n\\`\\`\\`ts\\n${renderWithFormatting(ast)}\\n\\`\\`\\``;\n}\n\nfunction renderCandleFWDepends(name: any, cfw_depends: string[]): any {\n    return `\nAs a part of CandleFW, cfw.${name} relies on the following libraries to make the magic happen. \nThe modular design of CFW allows each on to be used independently for specific project needs. \nGive them a look to find out more. \n\n- ${cfw_depends.map(e => `[${e}](https://github.com/candlefw/${e})`).join(\"\\n- \")}`;\n\n}\n\nfunction renderInstall(name: any): any {\n    return `\n#### npm\n\\`\\`\\`bash\n$ npm install --save @candlefw/${name}\n\\`\\`\\`\n#### yarn\n\\`\\`\\`bash\n$ yarn add @candlefw/${name}\n\\`\\`\\``;\n}\n\nfunction renderHeaderAndLogo(name: any, package_json: object, library_root: URL) {\n\n    const\n        logo_url = URL.resolveRelative(\"./source/brand/logo.svg\", library_root),\n        source_icon_url = URL.resolveRelative(\"./source/brand/go_to_source.svg\", library_root),\n        source_icon = fs.readFileSync(path.join(doc_dir, \"./source/svg/go_to_source.svg\"), { encoding: \"utf8\" }),\n        logo_partial = fs.readFileSync(path.join(doc_dir, \"./source/svg/cfw.partial.svg\"), { encoding: \"utf8\" }),\n        name_path = cfw_font.getPath(name.toUpperCase(), { x: 0, y: 0, fontSize: 32, anchor: 'top', attributes: { fill: \"rgb(50,50,50)\" } }),\n        cfw_path = cfw_font.getPath(\"CFW\", { x: 0, y: 0, fontSize: 14, anchor: 'top', attributes: { fill: \"rgb(100,100,100)\" } }),\n        logo =\n            `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" \n    xmlns:cc=\"http://creativecommons.org/ns#\"\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" \n    xmlns:svg=\"http://www.w3.org/2000/svg\"\n    xmlns=\"http://www.w3.org/2000/svg\" \n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    width=\"100%\" height=\"100%\" viewBox=\"0 0 ${name.length * 35 + 40} 85\" \n    >\n${logo_partial}\n<g transform=\"matrix(1,0,0,1,40,20)\">\n${cfw_path}\n</g>\n<g transform=\"matrix(1,0,0,1,40,40)\">\n${name_path}\n</g>\n</svg>`;\n\n    //Save the logo to the brand folder\n    fs.mkdirSync(logo_url.dir, { recursive: true });\n    fs.writeFileSync(logo_url.toString(), logo, { flag: \"w\" });\n    fs.writeFileSync(source_icon_url.toString(), source_icon, { flag: \"w\" });\n\n    return `<!-- this is a generated document - DO NOT EDIT THIS DOCUMENT - Refer to https://github.com/candlefw/doc/source/doc_fragments/generating_readmes.md -->\n<h1 align=center>\n    <img alt=\"cfw.${name}\" height=\"100\" src=\"source/brand/logo.svg\"/>\n</h1>\n\n<h3 align=center>${package_json.description}</h3>\n\n<p align=center> <sub><b>v${package_json.version}</b></sub> </p>`;\n}\n\n\nasync function gatherFragmentDocuments(p: string): /* File Names */ Promise<URL[]> {\n    const file_names = [];\n\n    try {\n        for (const d of await fsp.readdir(p, { withFileTypes: true })) {\n            if (d.isDirectory())\n                await gatherFragmentDocuments(path.join(p, d.name + \"/\"));\n            else {\n                const url = URL.resolveRelative(\"./\" + d.name, p);\n                file_names.push(url);\n            }\n        }\n    } catch (e) {\n        return [];\n    }\n\n    return file_names;\n}\n\n\nfunction sanitizeSourceURL(file_url: URL): string {\n    return file_url.toString().replace(process.cwd(), \"\");\n}\n\ntype fragment_data = { type: string, preamble: { usage: string[] | string, specifier: string; }, content: string; };\n\nasync function attachFragmentsToSections(sections: any) {\n    for (const file_url of await gatherFragmentDocuments(path.join(doc_dir, \"source/doc_fragments/\"))) {\n        try {\n            const\n                text = await file_url.fetchText(),\n                text_lex = new Lexer(text);\n\n            text_lex.source = sanitizeSourceURL(file_url);\n\n            const { value, error } = lrParse<fragment_data[]>(text_lex, fragment_parser_data, null);\n\n\n            if (!error)\n                for (const doc_fragment of value) {\n                    const\n                        start = doc_fragment.pos.copy(),\n                        end = doc_fragment.pos.getEnd();\n\n                    while (!end.END) end.next();\n\n                    addFragmentToSections(doc_fragment, sections, `${doc_fragment.pos.source}`, `L${start.line + 1}-L${end.line + 1}`);\n                }\n            else console.warn(error);\n\n        } catch (e) {\n            console.warn(e);\n        }\n    };\n}\n\n\nfunction attachCommentsToSections(\n    comments: Lexer[],\n    sections: any\n) {\n    for (const comment of comments) {\n\n        const { value, error } = lrParse<fragment_data>(comment.slice(), comment_parser_data),\n            end = comment.getEnd();\n\n        if (!error) {\n            addFragmentToSections(value, sections, `${comment.source}`, `L${comment.line + 1}-L${end.line + 1}`);\n        }\n    }\n}\n\nfunction addFragmentToSections(doc_fragment: fragment_data, sections: any, origin: string = \"undefined\", line) {\n\n    const { content, preamble, type } = doc_fragment;\n\n    if ((type == \"multiline\" || type == \"fragment\")\n        && preamble\n        && preamble.usage\n        && (\n            typeof preamble.usage == \"object\"\n                ? preamble.usage.filter(e => e.toUpperCase() == \"README\").length > 0\n                : preamble.usage.toUpperCase().includes(\"README\")\n        )) {\n\n        const section = preamble.specifier.toLowerCase();\n\n        if (!sections[section])\n            sections[section] = [];\n\n        sections[section].push(`\\n\\n<!-- origin=\"file:///.${origin}#${line}\" -->\\n\\n${content}\\n\\n<div align=\"right\"><a href=\".${origin}#${line}\"><img src=\"source/brand/go_to_source.svg\" height=\"16\" alt=\"src\"></a></div>`);\n    }\n}\n\n//open up first page\n(async function () {\n\n    await URL.server();\n\n    const\n        library_root = new URL(library + \"/\"),\n\n        package_json = await URL.resolveRelative(\"./package.json\", library_root)\n            .fetchJSON()\n            .catch(e => {\n\n                //Check for package.json; If this does not exists, then the CWD is not going\n                // to be a appropriate environment for the readme builder.\n\n                console.log(e);\n                console.warn(\"Could not find package.json. Exiting\");\n                process.exit(1);\n            }),\n\n        package_root_file = URL.resolveRelative(\n            package_json\n                .main\n                .replace(\"./build/library/\", \"./source/typescript/\")\n                .replace(\".js\", \".ts\"),\n            library_root),\n\n        //Grab the package of the library\n        readme_url = URL.resolveRelative(\"./README.md\", library_root),\n\n        cfw_depends = Object.entries((package_json.dependencies ?? {}))\n            .map(([key, val]) => key)\n            .filter(d => d.includes(\"@candlefw\"))\n            .map(e => e.replace(\"@candlefw/\", \"\")),\n\n        name = package_json.name.replace(\"@candlefw/\", \"\"),\n\n        root_file = await package_root_file.fetchText(),\n\n        //Document Sections -----------------------------------------------\n\n        section_header_indices = Object.fromEntries([\n            \"header\",\n            \"introduction\",\n            \"brief\",\n            \"install\",\n            \"usage\",\n            \"api\",\n            \"special\",\n            \"contribute\",\n            \"contributors\",\n            \"docs\",\n            \"CFW_Dependencies\",\n            \"license\",\n        ].map((k, v) => [k, v])),\n\n        sections = {\n            install: [],\n            brief: [],\n            docs: [],\n            CFW_Dependencies: [],\n            header: [renderHeaderAndLogo(name, package_json, library_root)]\n        },\n\n        //Root Source File -----------------------------------------------\n\n        root_file_lexer = new Lexer(root_file);\n\n    root_file_lexer.source = sanitizeSourceURL(package_root_file);\n\n    const { ast, comments } = parser(root_file_lexer, debug_data);\n\n    await attachFragmentsToSections(sections);\n\n    attachCommentsToSections(comments, sections);\n\n    if (sections.install.length == 0)\n        sections.install.push(renderInstall(name));\n\n    if (sections.brief.length == 0)\n        sections.brief.push(renderPollyFillBrief(ast));\n\n    if (sections.CFW_Dependencies.length == 0 && cfw_depends.length > 0)\n        sections.CFW_Dependencies.push(renderCandleFWDepends(name, cfw_depends));\n\n    sections.docs.push(renderDocumentSection(name));\n\n    fs.writeFileSync(readme_url.toString(),\n        Object.entries(sections).sort(\n\n            ([a], [b]) => {\n\n                const\n                    a_index = section_header_indices[a.toLowerCase()] ?? Infinity,\n                    b_index = section_header_indices[b.toLowerCase()] ?? Infinity;\n\n                if (a_index == b_index) return 0;\n\n                return a_index < b_index ? -1 : 1;\n\n            }).filter(([, n]) => n.length > 0).map(([key, nodes]) => `${\n                key.toLowerCase() == \"header\" ? \"\" :\n                    \"# \" + key.replace(/\\_/g, \" \").toUpperCase()\n                }\\n${nodes.join(\"\\n\")}`).join(\"\\n\\n\")\n    );\n})();"]}